<AiTaskAgent>
  <GlobalRule alwaysApply="true">If an ANY point you get stuck, review troubleshooter.xml to help you troubleshoot the problem.</GlobalRule>
  <GlobalRule alwaysApply="true">All new code creation should ALWAYS follow tdd-cycle.xml</GlobalRule>
  <GlobalRule alwaysApply="true">Tasks in the GitHub project board at https://github.com/users/Tiberriver256/projects/1 are sorted in order of priority - ALWAYS pick the task from the top of the backlog column.</GlobalRule>
  <GlobalRule alwaysApply="true">Always use the GitHub CLI (gh) for project and issue management. If documentation is needed, use browser_navigate to access the documentation. Always use a markdown file for writing/updating issues rather than trying to work with cli args.</GlobalRule>
  <GlobalRule alwaysApply="true">There is a strict WIP limit of 1. If any issue is in the Research, Implementation, or In Review status, that issue MUST be completed before starting a new one from Backlog.</GlobalRule>
  <GlobalRule alwaysApply="true">We are always operating as the GitHub user 'Tiberriver256'. All issues must be assigned to 'Tiberriver256' before starting work on them.</GlobalRule>
  <GlobalRule alwaysApply="true">To update a project item status, first get the project ID with `gh project list --owner Tiberriver256 --format json`, then get the item ID with `gh project item-list [project-id] --format json`, and finally update the status with `gh project item-edit --id [item-id] --project-id [project-id] --field-id PVTSSF_lAHOAGqmtM4A2BrBzgrZoeI --single-select-option-id [status-id]`. Status IDs are: Backlog (f75ad846), Research (61e4505c), Implementation (47fc9ee4), In review (df73e18b), Done (98236657).</GlobalRule>
  <GlobalRule alwaysApply="true">To create a GitHub issue: 1) Create a markdown file for the issue body (e.g., `issue_body.md`), 2) Use `gh issue create --title "Issue Title" --body-file issue_body.md --label "enhancement"` to create the issue, 3) Assign it with `gh issue edit [issue-number] --add-assignee Tiberriver256`, 4) Add status label with `gh issue edit [issue-number] --add-label "status:research"`, 5) Add to project with `gh project item-add [project-id] --owner Tiberriver256 --url [issue-url]`, and 6) Update status in project using the project item-edit command as described above.</GlobalRule>
  <InitialSetup order="1">
    <Step order="1">Read the dream team documentation at project-management/planning/the-dream-team.md to understand the team structure and roles</Step>
    <Step order="2">Read all files in the project-management/planning directory to understand the project architecture, features, and structure</Step>
    <Step order="3">Check if there is any issue in the GitHub project board at https://github.com/users/Tiberriver256/projects/1 with a status of "Research", "Implementation", or "In Review". Use 'gh project item-list' to check the current issues and their status.</Step>
    <Step order="4">
      If there is any issue in "Research", "Implementation", or "In Review" status, ensure it is assigned to 'Tiberriver256' and work on that issue, moving directly into the appropriate phase of TaskWorkflow.
      If not, take the FIRST issue from the top of the "Backlog" status in the project board at https://github.com/users/Tiberriver256/projects/1, assign it to 'Tiberriver256', and update its status to "Research". 
      Remember that issues are sorted by priority with most important at the top. Add a comment with your implementation approach and planned sub-tasks if needed. Use the GitHub CLI (gh) for all project and issue management.
    </Step>
    <Step order="5">Create a new branch for the current task, branching from the latest main branch. Use a descriptive name for the branch, related to the task, by running ./create_branch.sh &lt;branch_name&gt;.</Step>
    <Step order="6">Read tdd-cycle.xml to understand the TDD cycle.</Step>
    <Step order="7">Read all files in the docs/testing directory to understand the testing strategy.</Step>
    <Step order="8">Start the research phase of TaskWorkflow.</Step>
  </InitialSetup>
  
  <TaskWorkflow order="2">
    <Phase name="Research" order="1">
      <Step order="1">Make sure the issue is assigned to 'Tiberriver256' and its status is set to "Research" in the GitHub project board.</Step>
      <Step order="2">Research the selected GitHub issue thoroughly</Step>
      <Step order="3">Create notes in a comment on the GitHub issue about your approach. Use the GitHub CLI (gh) for interacting with issues.</Step>
      <Step order="4">Break down the task into sub-tasks only if necessary (prefer simplicity)</Step>
      <Step order="5">If the task is straightforward, keep it as a single task</Step>
    </Phase>
    
    <Phase name="Planning" order="2">
      <STOPPING_POINT order="1">Present your sub-tasks (if any) and approach for approval</STOPPING_POINT>
    </Phase>
    
    <Phase name="Implementation" order="3">
      <Step order="1">Update the issue status to "Implementation" in the GitHub project board, ensuring it remains assigned to 'Tiberriver256'.</Step>
      <Step order="2">Assume the role and persona of the team member assigned to the task</Step>
      <Step order="3">If multiple roles are involved, simulate pair/mob programming</Step>
      <Step order="4">Use Test-Driven Development for all coding tasks</Step>
      <Step order="5">Create any necessary readme.md files for documentation or reference</Step>
    </Phase>
    
    <Phase name="Completion" order="4">
      <Step order="1">Create a pull request and update the issue status to "In Review" in the GitHub project board, ensuring it remains assigned to 'Tiberriver256'.</Step>
      <STOPPING_POINT order="2">Present your work for review</STOPPING_POINT>
      <Step order="3">Address any feedback, and present for re-review; Continue in this manner until approved</Step>
      <Step order="4">When the task is approved, run ./finish_task.sh "PR Title" "PR Description" to commit, push, and update the PR for the repository at https://github.com/Tiberriver256/mcp-server-azure-devops</Step>
      <Step order="5">After the PR is merged, update the issue status to "Done" and close the GitHub issue with an appropriate comment summarizing the work done. Use the GitHub CLI (gh) to close issues.</Step>
      <Step order="6">Wait for feedback before starting a new task</Step>
    </Phase>
  </TaskWorkflow>
  
  <WorkingPrinciples>
    <Principle>Use the tree command when exploring directory structures</Principle>
    <Principle>Follow KISS (Keep It Stupid Simple) and YAGNI (You Aren't Gonna Need It) principles</Principle>
    <Principle>Focus on delivery rather than over-engineering or gold-plating features</Principle>
    <Principle>Implement Test-Driven Development for all code</Principle>
    <Principle>Use the GitHub CLI (gh) for any GitHub-related tasks including project and issue management. Documentation is available at:
      - GitHub Projects CLI: https://cli.github.com/manual/gh_project
      - GitHub Issues CLI: https://cli.github.com/manual/gh_issue</Principle>
    <Principle>If GitHub CLI documentation is needed, use browser_navigate to access documentation</Principle>
    <Principle>Use Puppeteer if web browsing is required</Principle>
    <Principle>If any task is unclear, stop and ask for clarification before proceeding</Principle>
    <Principle>Always take tasks from the top of the GitHub project backlog column at https://github.com/users/Tiberriver256/projects/1 as they are sorted in priority order</Principle>
    <Principle>Strictly adhere to the WIP limit of 1 - only one issue should be in Research, Implementation, or In Review status at any time</Principle>
    <Principle>Move issues through the status workflow: Backlog → Research → Implementation → In Review → Done</Principle>
    <Principle>All work is performed as the GitHub user 'Tiberriver256'. Ensure all issues you work on are assigned to this user.</Principle>
  </WorkingPrinciples>
</AiTaskAgent>
